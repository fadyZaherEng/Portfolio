import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:my_portfolio/generated/l10n.dart';
import 'package:my_portfolio/src/config/routes/routes_manager.dart';
import 'package:my_portfolio/src/config/theme/color_schemes.dart';
import 'package:my_portfolio/src/core/utils/constants.dart';
import 'package:my_portfolio/src/presentation/blocs/portfolio/portfolio_bloc.dart';
import 'package:my_portfolio/src/presentation/screens/portfolio/Mobile/widgets/bounce_and_scale_text_widget.dart';
import 'package:my_portfolio/src/presentation/screens/portfolio/Mobile/widgets/custom_app_bar_widget.dart';
import 'package:my_portfolio/src/presentation/screens/portfolio/Mobile/widgets/web_circle_painter_button_scroll.dart';
import 'package:my_portfolio/src/presentation/screens/training/widgets/training_item_widget.dart';
import 'package:my_portfolio/src/presentation/widgets/restart_widget.dart';
import "package:universal_html/html.dart" as html;

class TrainingScreen extends StatefulWidget {
  const TrainingScreen({super.key});

  @override
  State<TrainingScreen> createState() => _TrainingScreenState();
}

class _TrainingScreenState extends State<TrainingScreen> {
  List<Training> trainings = [];

  bool isDarkMode = false;

  String currentLocale = 'en';

  double _scrollPercentage = 0;

  GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();

  final ScrollController _scrollController = ScrollController();

  PortfolioBloc get _bloc => BlocProvider.of<PortfolioBloc>(context);

  @override
  void initState() {
    _bloc.add(PortfolioGetThemeEvent());
    _bloc.add(PortfolioGetLanguageEvent());
    super.initState();
    _scrollController.addListener(() {
      setState(() {
        _scrollPercentage = _scrollController.position.pixels /
            _scrollController.position.maxScrollExtent;
      });
    });
    trainings = Constants.trainings;
  }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<PortfolioBloc, PortfolioState>(
      listener: (context, state) {
        if (state is PortfolioGetThemeState) {
          isDarkMode = state.isDark;
        } else if (state is PortfolioGetLanguageState) {
          currentLocale = state.locale.languageCode;
        } else if (state is PortfolioChangeThemeState) {
          isDarkMode = state.theme == Constants.dark;
          RestartWidget.restartApp(context);
          html.window.location.reload();
        } else if (state is PortfolioChangeLanguageState) {
          currentLocale = state.locale.languageCode;
          RestartWidget.restartApp(context);
          html.window.location.reload();
        }
      },
      builder: (context, state) {
        return WillPopScope(
          onWillPop: () async {
            context.go(Routes.portfolio);
            Navigator.pop(context);
            return false;
          },
          child: Scaffold(
            resizeToAvoidBottomInset: false,
            backgroundColor:
                isDarkMode ? ColorSchemes.iconBackGround : Colors.white,
            appBar: CustomAppBarWidget(
              isBack: true,
              onBackTap: () {
                context.go(Routes.portfolio);
                Navigator.pop(context);
              },
              onLogoTap: () {
                RestartWidget.restartApp(context);
                context.go(Routes.portfolio);
              },
            ),
            body: Padding(
              padding:   EdgeInsets.all(MediaQuery.sizeOf(context).width>1200?16:10),
              child: Stack(
                alignment: AlignmentDirectional.bottomEnd,
                children: [
                  SingleChildScrollView(
                    controller: _scrollController,
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.start,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisSize: MainAxisSize.max,
                      children: [
                        Padding(
                          padding:   EdgeInsets.symmetric(horizontal: MediaQuery.sizeOf(context).width>1200?16:5),
                          child: Row(
                            children: [
                              Icon(
                                Icons.model_training_outlined,
                                color: ColorSchemes.iconDarkWhite,
                                size: 28,
                              ),
                              const SizedBox(width: 15),
                              BouncingAndScalingTextWidget(
                                title: S.of(context).training,
                                style: Theme.of(context)
                                    .textTheme
                                    .titleLarge
                                    ?.copyWith(
                                      fontSize:
                                          MediaQuery.of(context).size.width >
                                                  1300
                                              ? 30
                                              : 26,
                                      fontWeight:
                                          MediaQuery.of(context).size.width >
                                                  1300
                                              ? FontWeight.normal
                                              : FontWeight.bold,
                                      color: ColorSchemes.iconDarkWhite,
                                    ),
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(height: 10),
                        Directionality(
                          textDirection: TextDirection.ltr,
                          child: Column(
                            children: List.generate(
                              trainings.length,
                              (index) => TrainingItemWidget(
                                training: trainings[index],
                                index: index,
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  // Circular Percentage Indicator
                  Visibility(
                    visible: _scrollPercentage > 0 && _scrollPercentage < 0.95,
                    child: Padding(
                      padding: const EdgeInsets.all(15),
                      child: CustomPaint(
                        size: const Size(30, 30),
                        painter: CircularPainter(percentage: _scrollPercentage),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}
