// ignore_for_file: avoid_print
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:mailto/mailto.dart';
import 'package:my_portfolio/generated/l10n.dart';
import 'package:my_portfolio/src/config/routes/routes_manager.dart';
import 'package:my_portfolio/src/config/theme/color_schemes.dart';
import 'package:my_portfolio/src/core/utils/constants.dart';
import 'package:my_portfolio/src/core/utils/show_snack_bar.dart';
import 'package:my_portfolio/src/di/data_layer_injector.dart';
import 'package:my_portfolio/src/domain/usecase/get_theme_use_case.dart';
import 'package:my_portfolio/src/presentation/screens/portfolio/widgets/custom_app_bar_widget.dart';
import 'package:my_portfolio/src/presentation/screens/portfolio/widgets/custom_resume_widget.dart';
import 'package:my_portfolio/src/presentation/widgets/restart_widget.dart';
import 'package:url_launcher/url_launcher.dart';

class TouchMeScreen extends StatefulWidget {
  const TouchMeScreen({super.key});

  @override
  _TouchMeScreenState createState() => _TouchMeScreenState();
}

class _TouchMeScreenState extends State<TouchMeScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _messageController = TextEditingController();

  String? _nameError;
  String? _emailError;
  String? _messageError;

  bool isDarkMode = false;

  @override
  void initState() {
    super.initState();

    // Enable real-time validation
    _nameController.addListener(() => _validateName(_nameController.text));
    _emailController.addListener(() => _validateEmail(_emailController.text));
    _messageController
        .addListener(() => _validateMessage(_messageController.text));

    isDarkMode = GetThemeUseCase(injector())() == Constants.dark;
  }

  /// Validates the name field
  void _validateName(String value) {
    if (value.trim().length < 3) {
      setState(() => _nameError = S.of(context).nameIsRequired);
    } else {
      setState(() => _nameError = null);
    }
  }

  /// Validates the email field
  void _validateEmail(String value) {
    _emailError = _emailController.text.trim().isEmpty
        ? S.of(context).emailIsRequired
        : !RegExp(r"^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$")
                .hasMatch(_emailController.text)
            ? S.of(context).invalidEmail
            : null;

    setState(() {});
  }

  /// Validates the message field
  void _validateMessage(String value) {
    if (value.trim().length < 10) {
      setState(() => _messageError = S.of(context).messageIsRequired);
    } else {
      setState(() => _messageError = null);
    }
  }

  Future<void> sendEmail() async {
    setState(() {
      _nameError = _nameController.text.trim().length < 3
          ? S.of(context).nameIsRequired
          : null;
      _emailError = _emailController.text.trim().isEmpty
          ? S.of(context).emailIsRequired
          : !RegExp(r"^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$")
                  .hasMatch(_emailController.text)
              ? S.of(context).invalidEmail
              : null;
      _messageError = _messageController.text.trim().length < 10
          ? S.of(context).messageIsRequired
          : null;
    });

    if (_nameError == null && _emailError == null && _messageError == null) {
      final String name = _nameController.text.trim();
      final String email = _emailController.text.trim();
      final String message = _messageController.text.trim();

      final mailtoLink = Mailto(
        to: ['fedo.zaher@gmail.com'],
        subject: S.of(context).newContactFormSubmission,
        body:
            '${S.of(context).name}: $name\n${S.of(context).email}: $email\n${S.of(context).message}: $message',
      );

      final Uri emailUri = Uri.parse(mailtoLink.toString());

      if (await canLaunchUrl(emailUri)) {
        await launchUrl(emailUri);
      } else {
        showSnackBar(
          context: context,
          message: S.of(context).couldNotOpenEmail,
          color: ColorSchemes.snackBarWarning,
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        context.go(Routes.portfolio);
        Navigator.pop(context);
        return false;
      },
      child: Scaffold(
        resizeToAvoidBottomInset: false,
        backgroundColor:
            isDarkMode ? ColorSchemes.iconBackGround : Colors.white,
        appBar: CustomAppBarWidget(
          isBack: true,
          onBackTap: () {
            context.go(Routes.portfolio);
            Navigator.pop(context);
          },
          onLogoTap: () {
            RestartWidget.restartApp(context);
            context.go(Routes.portfolio);
          },
        ),
        body: Padding(
          padding: const EdgeInsets.all(16),
          child: Stack(
            alignment: AlignmentDirectional.bottomEnd,
            children: [
              SingleChildScrollView(
                child: Form(
                  key: _formKey,
                  child: Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        _buildTextField(
                          _nameController,
                          S.of(context).yourName,
                          Icons.person,
                          _nameError,
                          maxLines: 1,
                        ),
                        const SizedBox(height: 16),
                        _buildTextField(
                          _emailController,
                          S.of(context).yourEmail,
                          Icons.email,
                          _emailError,
                          maxLines: 1,
                          isEmail: true,
                        ),
                        const SizedBox(height: 16),
                        _buildTextField(
                          _messageController,
                          S.of(context).yourMessage,
                          Icons.message,
                          _messageError,
                          maxLines: 5,
                        ),
                        const SizedBox(height: 42),
                        CustomResumeWidget(
                          onViewResumeTap: sendEmail,
                          isDarkMode: isDarkMode,
                          borderColor: ColorSchemes.white,
                          textColor: isDarkMode
                              ? ColorSchemes.white
                              : ColorSchemes.iconBackGround,
                          title: S.of(context).sendMessage,
                          width: MediaQuery.of(context).size.width * 0.6,
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTextField(
    TextEditingController controller,
    String hintText,
    IconData icon,
    String? errorText, {
    int maxLines = 1,
    bool isEmail = false,
  }) {
    return SizedBox(
      width: MediaQuery.of(context).size.width > 850
          ? 850
          : MediaQuery.of(context).size.width * 0.8,
      child: TextFormField(
        controller: controller,
        textAlign: TextAlign.start,
        keyboardType: isEmail ? TextInputType.emailAddress : TextInputType.text,
        maxLines: maxLines,
        style: Theme.of(context)
            .textTheme
            .bodyMedium
            ?.copyWith(color: Colors.white),
        decoration: InputDecoration(
          hintText: hintText,
          hintStyle: Theme.of(context)
              .textTheme
              .bodyMedium
              ?.copyWith(color: Colors.white54),
          contentPadding:
              const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          prefix: Icon(
            icon,
            color: Colors.white,
          ),
          filled: true,
          fillColor: ColorSchemes.primary,
          errorText: errorText,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide.none,
          ),
        ),
      ),
    );
  }
}
